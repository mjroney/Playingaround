    vacation_days = {
        timedelta(days = 365.25): 0,
        timedelta(days = 365.25 * 2): 5,
        timedelta(days = 365.25 * 8): 10,
        timedelta(days = 365.25 * 15): 15,
        timedelta(days = 365.25 * 24): 20,
        }

    def days_at_new_year():
        service_length = benefit_date - datetime.date(2020, 01, 01)

    def days_end_of_year():
        service_length = benefit_date - datetime.date(2020, 12, 31)

def vacation_days():
    amount_of_vdays = {
    today: date.today(),
    first_yr: today.replace(today.year - 1),
    five_days: today.replace(today.year - 2),
    ten_days: today.replace(today.year - 8),
    fifteen_days: today.replace(today.year - 15),
    twenty_days: today.replace(today.year - 24),
     }

def when_more():
    benefit_date = date_name('benefit date')
    

class vacation():

    holidays(2020) = {
    'New Years Day' : datetime.date(2020, 1, 01),
    'Martin Luther King Day' : datetime.date(2020, 1, 20),
    'Good Friday' : datetime.date(2020, 4, 10),
    'Memorial Day' : datetime.date(2020, 5, 25),
    'Independance Day' : datetime.date(2020, 7, 04),
    'Labor Day' : datetime.date(2020, 9, 07),
    'Thanksgiving Day' : datetime.date(2020, 11, 26),
    'Black Friday' : datetime.date(2020, 11, 27),
    'Christmas Eve Day' : datetime.date(2020, 12, 24),
    'Christmas Day' : datetime.date(2020, 12, 25),
    }
from datetime import date, time, datetime, timedelta
from time import ctime, strftime, struct_time, strptime, localtime, mktime, time

class tm_func:

    def __init__(self, datetimer, date_name, time_since):

        self.datetimer = datetimer
        self.date_name = date_name
        self.time_since = time_since

    def datetimer(func):
        # Decorator - Turns user input into datetime.date object.
        def function_wrapper(X):
            print('Enter the ', X, 'in \n YYYY, MM, DD format.')
            func(X)
            date_entry = input(': ')
            year, month, day = map(int, date_entry.split(', '))
            return date(year, month, day)
        return function_wrapper

    def ordinal(func):
        # Decorator - Converts between ordinal and datetime objects.
        def function_wrapper(X):
            if int(X) == int:
                return date.fromordinal(X)
            elif int(X) != int:
                return date.toordinal(X)
        return function_wrapper

    def time_since(*X):
        today = datetime.today()
        X = date_name(X)
        diff = (date.toordinal(today) - 365) - date.toordinal(X)
        since = date.timetuple(date.fromordinal(diff))
        return "You are {} years and {} months old.".format(since.tm_year, since.tm_mon)

    @datetimer
    def date_name(*X):
        # Used to create the datetime object for initial input into db.
        pass
	
>>> "You are {} years and {} months old.".format(since.tm_year, since.tm_mon)
'You are 37 years and 9 months old.'

>>> from datetime import date, time, datetime
>>> from time import ctime, localtime, mktime, strptime, gmtime
>>> def datetimer(func):
    def function_wrapper(X):
        print('Enter your ', X, 'in \n YYYY, MM, DD format.')
        func(X)
        date_entry = input(': ')
        year, month, day = map(int, date_entry.split(', '))
        return date(year, month, day)
    return function_wrapper

>>> @datetimer
def date_name(X):
    pass

>>> def time_since(func):
	def function_wrapper(Y):
		birthday = date_name('birthday')
		today = datetime.today()
		return today.year - birthday.year - ((today.month, today.day) < (birthday.month, birthday.day))
	return function_wrapper

>>> @time_since
@datetimer
def age(Y):
    pass

>>> matt = age('matt')
Enter your  birthday in 
 YYYY, MM, DD format.
: 1981, 12, 19
>>> matt
37
>>> age('other_matt')
Enter your  birthday in 
 YYYY, MM, DD format.
: 1981, 12, 19
37

today = datetime.today()
datetime.datetime(2019, 8, 14, 11, 13, 34, 288481)

now = datetime.now()
datetime.datetime(2019, 8, 14, 11, 12, 26, 896352)

time()
datetime.time(0, 0)

localtime()
time.struct_time(tm_year=2019, tm_mon=8, tm_mday=14, tm_hour=11, tm_min=13, tm_sec=51, tm_wday=2, tm_yday=226, tm_isdst=1)
gmtime()
time.struct_time(tm_year=2019, tm_mon=8, tm_mday=14, tm_hour=15, tm_min=43, tm_sec=5, tm_wday=2, tm_yday=226, tm_isdst=0)

mktime(localtime())
1565795794.0

ctime()
'Wed Aug 14 11:13:56 2019'

>>> date.timetuple(birthday)
time.struct_time(tm_year=1981, tm_mon=12, tm_mday=19, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=5, tm_yday=353, tm_isdst=-1)

>>> mktime(date.timetuple(birthday))
377586000.0

>>> birthday = date(1981, 12, 19)
>>> birthday
datetime.date(1981, 12, 19)

>>> date.toordinal(birthday)
723533
>>> date.toordinal(today)
737285
>>> date.toordinal(today) - date.toordinal(birthday)
13752

>>> date.fromordinal(13752)
datetime.date(38, 8, 26)

def datetimer(func):
    def function_wrapper(X):
        print('Enter your ', X, 'in \n YYYY, MM, DD format.')
        func(X)
        date_entry = input(': ')
        year, month, day = map(int, date_entry.split(', '))
        return date(year, month, day)
    return function_wrapper

@datetimer
def date_name(X):
    pass

>>> birthday = date_name('birthday')
Enter your  birthday in 
 YYYY, MM, DD format.
: 1981, 12, 19
>>> birthday
datetime.date(1981, 12, 19)

>>> def age(func):
	def function_wrapper(Y):
		birthday = date_name('birthday')
		today = datetime.today()
		date.toordinal(birthday)
		Y = date.toordinal(today) - date.toordinal(birthday)
		return date.fromordinal(Y)
	return function_wrapper

>>> @age
def years_old(Y):
	pass

>>> matt = years_old('matt')
Enter your  birthday in 
 YYYY, MM, DD format.
: 1981, 12, 19
>>> matt
datetime.date(38, 8, 27)  # Years are off by 1 year (too much)

# Various time variables and calculators to help with future work.
# calculate_age currently requires input. Once it is is being used it will need to parse a date object on its own (from db)

def calculate_age():
    from datetime import date, timedelta
    year = int(input('Enter your birth year as YYYY... \n'))
    month = int(input('    month as MM... \n'))
    day = int(input('    and day as DD... \n'))
    born = date(year, month, day)
    today = date.today()
    print(' \nYou are:')
    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))
    
def me_time():
    import datetime
    from time import ctime, strftime, struct_time, strptime, localtime, mktime, time
    from datetime import datetime, timedelta, date, time
    global tt, time_stamp, tm_breakdown, whole_seconds, all_seconds, mil_time, civ_time, date_trio, today, today_day, julian, week_num, block_stamp, julian_conv, my_time
    tt = datetime.now()
    time_stamp = ctime()
    tm_breakdown = localtime()
    whole_seconds = mktime(tm_breakdown)
    all_seconds = time()
    mil_time = tt.strftime("%H%M")
    civ_time = tt.strftime("%I:%M %p")
    date_trio = tt.strftime("%d %B, %Y")
    today = date.today()
    today_day = tt.strftime('%A')
    julian = tt.strftime('%j')
    week_num = tt.strftime('%U')
    
def block_stamp():
    print(date_trio, '\n', civ_time)

def julian_conv():
    date_to_convert = input('Please enter the desired date in YYYY-MM-DD format. \n')
    print(datetime.strptime(date_to_convert, '%Y-%m-%d').timetuple().tm_yday)

my_time = {tt, time_stamp, tm_breakdown, whole_seconds, all_seconds, mil_time, civ_time, date_trio, today, today_day, julian, week_num, block_stamp(), julian_conv()}
