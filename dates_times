# Various time variables and calculators to help with future work.
# calculate_age currently requires input. Once it is is being used it will need to parse a date object on its own (from db)

def calculate_age():
    from datetime import date, timedelta
    year = int(input('Enter your birth year as YYYY... \n'))
    month = int(input('...month as MM... \n'))
    day = int(input('...and day as DD... \n'))
    born = date(year, month, day)
    today = date.today()
    return today.year - born.year - ((today.month, today.day) < (born.month, born.day))
    
def me_time():
    import datetime
    from time import ctime, strftime, struct_time, strptime, localtime, mktime, time
    from datetime import datetime, timedelta, date, time
    global tt, time_stamp, tm_breakdown, whole_seconds, all_seconds, mil_time, civ_time, date_trio, today, today_day, julian, week_num, block_stamp, julian_conv, my_time
    tt = datetime.now()
    time_stamp = ctime()
    tm_breakdown = localtime()
    whole_seconds = mktime(tm_breakdown)
    all_seconds = time()
    mil_time = tt.strftime("%H%M")
    civ_time = tt.strftime("%I:%M %p")
    date_trio = tt.strftime("%d %B, %Y")
    today = date.today()
    today_day = tt.strftime('%A')
    julian = tt.strftime('%j')
    week_num = tt.strftime('%U')
    
def block_stamp():
    print(date_trio, '\n', civ_time)

def julian_conv():
    date_to_convert = input('Please enter the desired date in YYYY-MM-DD format. \n')
    print(datetime.strptime(date_to_convert, '%Y-%m-%d').timetuple().tm_yday)

my_time = {tt, time_stamp, tm_breakdown, whole_seconds, all_seconds, mil_time, civ_time, date_trio, today, today_day, julian, week_num, block_stamp(), julian_conv()}
